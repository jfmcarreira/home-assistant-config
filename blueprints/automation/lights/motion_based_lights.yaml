blueprint:
  name: Turn on light based on motion, illuminance and condtions (v2)
  description: >
    Turn on a light based on motion detection and low light level.

    Required entities:
      - Input Number (register auto/manual mode)
      - Motion sensor (single sensor or group)
      - Target entity (light, switch, scene or script)

    Optional entities:
    - House mode (only run in a specific house mode from a input_select
    - Illuminance sensor (sensor in illuminance class)
    - Illuminance cutoff value  (number)
    - Blocking entity (any entity with state on/off)

  domain: automation
  input:
    house_mode:
      name: House mode
      description: Only Run in a specific house mode is active
      default: 'On'
      selector:
        text:
    run_while_sleep:
      name: Run while the house is on Sleep mode
      default: 'off'
      selector:
        boolean:
    motion_sensor:
      name: Motion Sensor
      description: This sensor will trigger the turning on of the target entity.
      selector:
        entity:
    light_mode_counter:
      name: Automatic light mode counter
      description: Number of times automatic light was turned on (0 means manual mode)
      selector:
        entity:
          domain: input_number
    target_entity:
      name: Target entity to turn ON
      description: The light, switch, scene to turn on (or script to run) when the automation is triggered when in normal mode.
      selector:
        entity:
          domain: light
    no_motion_wait:
      name: Turn off wait time
      description: Time to leave the target entity on after last motion is detected. If not used entity will not auto turn off.
      default: 60
      selector:
        number:
          min: 0
          max: 600
          unit_of_measurement: "s"
    illuminance_sensor:
      name: (OPTIONAL) Illuminance sensor
      description: This sensor will be used to determine the illumination.
      default:
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_cutoff:
      name: (OPTIONAL) Illuminance cutoff value
      description: This input_number will be used to compare to the current illumination to determine if it is low.
      default:
      selector:
        number:
          min: 0
          max: 100
    blocker_entity:
      name: (OPTIONAL) Blocking entity
      description: If this entity's state is on, it will prevent the automation from running. e.g. other lights on.
      default:
      selector:
        entity:


mode: restart
max_exceeded: silent

variables:
  # Entity with the house mode
  # (this is typically the same for all automations, so no input option)
  house_mode: "input_select.house_mode"

  # Input based variabled
  target_entity: !input target_entity
  illuminance_currently: !input illuminance_sensor
  illuminance_cutoff: !input illuminance_cutoff
  blocker_entity: !input blocker_entity
  no_motion_wait: !input no_motion_wait
  required_house_mode: !input house_mode
  run_while_sleep: !input run_while_sleep
  light_mode_counter: !input light_mode_counter

trigger:
  - platform: state
    entity_id: !input motion_sensor
    to: "on"

condition:
  # Only run if in the specified house mode
  - condition: template
    value_template: >
      {{
        (required_house_mode == none)
        or
        states[house_mode].state == required_house_mode
      }}

  # Never run in Off or Sleep mode
  # (this is implementation specific)
  - condition: template
    value_template: >
      {{
        ( not states[house_mode].state == 'Off' )
        and
        ( not states[house_mode].state == 'Sleep' or run_while_sleep == True )
      }}

  # Now either run if the light is Off or if it is already running
  - condition: or
    conditions:
      - condition: template
        value_template: "{{ states[light_mode_counter].state | int > 0 }}"

      - condition: and
        conditions:
          # This conditions matter if the light is not in automatic mode

          # Do not run if the blocker is ON
          - condition: template
            value_template: "{{ (blocker_entity == none) or (states[blocker_entity].state == 'off') }}"

          # Check illuminance level
          - condition: template
            value_template: >
              {{
                (illuminance_currently == none)
                or
                (illuminance_cutoff == none)
                or
                (states[illuminance_currently].state | int < illuminance_cutoff | int )
              }}

          # Do not run if light is on (manually turn on)
          - condition: state
            entity_id: !input target_entity
            state: "off"



action:
  - choose:
      - conditions: "{{ states[target_entity].state == 'off' }}"
        sequence:
          - service: input_number.increment
            data:
              entity_id: !input light_mode_counter

  - service: light.turn_on
    entity_id: !input target_entity

  # Wait for motion sensor to turn off
  - wait_for_trigger:
      - platform: state
        entity_id: !input motion_sensor
        from: "on"
        to: "off"

  # Cancel if target is already off
  # Otherwise wait for timeout
  - wait_template: "{{ not states[target_entity].state == 'on' }}"
    timeout:
      seconds: "{{ ( (no_motion_wait|int) * (states[light_mode_counter].state|int) ) | int }}"

  # Wait completed means that light was turned off manually
  # If so reset counter
  - choose:
      - conditions: "{{ wait.completed }}"
        sequence:
          - service: input_number.set_value
            data:
              entity_id: !input light_mode_counter
              value: 0

  # Only continue if target light is still on
  - condition: state
    entity_id: !input target_entity
    state: "on"

  - service: light.turn_off
    entity_id: !input target_entity

  - wait_template: "{{ states[target_entity].state == 'on' }}"
    timeout:
      seconds: "{{ no_motion_wait }}"

  - service: input_number.set_value
    data:
      entity_id: !input light_mode_counter
      value: 0
