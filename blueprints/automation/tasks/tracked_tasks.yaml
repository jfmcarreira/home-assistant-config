blueprint:
  name: "[Tasks] Track and notification of periodic task"
  description: >
    This automation track the end of a task and reminder for atention
    Example:
      - Replace filters

  domain: automation
  input:
    task_needs_attention:
      name: Sensor da Tarefa
      description: Sensor que detecta se é necessário realizar a tarefa (binary_sensor.dryer_machine_need_emtpy)
      selector:
        entity:
          domain: binary_sensor
    task_done_code_name:
      name: Código quando a tarefa é executada (Dryer_Machine_Empty)
    task_sensor:
      name: Sensor com última realização
      description: Sensor SQL que guarda a última execução da tarefaz
      selector:
        entity:
          integration: sql
          domain: sensor
    send_notification:
      name: Notificação
      description: Controlo para enviar notificações
      default: "on"
      selector:
        boolean:
    notification_max_time:
      name: Horário Máximo de Notificação
      description: Hora a partir da qual já não são enviadas notificações
      default: "23:00:00"
      selector:
        time:
    notification_message:
      name: Mensagem na Notificação
      description: >
        Mensagem enviada na notificação (A máquina de secar terminou! Pode retirar a roupa)
      selector:
        text:
    notification_action:
      name: Acção na Notificação
      description: >
        Texto da acção que aparece na notificação (Registar roupa retirada da máquina)
      selector:
        text:
    android_task_id:
      name: ID da notificação Android
      selector:
        number:
          min: 0
          max: 100
    notification_action_id:
      name: ID da acção
      description: >
        ID unico para registar acção concluida (dryer_remove_clothes)

mode: restart
max_exceeded: silent

variables:
  task_done_code_name: !input task_done_code_name
  record_timestamp: "{{ now().timestamp() | timestamp_custom('%Y-%m-%d %H:%M:%S') }}"
  task_needs_attention: !input task_needs_attention
  tts_message_timming: "00:00:10"
  send_notification: !input send_notification

trigger:
  - id: trigger_task_overdue
    entity_id: !input task_needs_attention
    from: "on"
    platform: state
    to: "off"

  - id: trigger_send_notification
    platform: event
    event_type: event_remaind_task_todo

  - id: trigger_notification_action
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: !input notification_action_id

condition:
  - condition: or
    conditions:
      - "{{ trigger.id == 'trigger_task_overdue' }}"
      - "{{ trigger.id == 'trigger_send_notification' }}"
      - condition: state
        entity_id: !input task_needs_attention
        state: "on"
  - condition: or
    conditions:
      - condition: not
        conditions:
          - condition: trigger
            id: "0"
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ send_notification == True }}"
          - condition: state
            entity_id: binary_sensor.notification_non_disturb
            state: "off"
          - condition: state
            entity_id: !input task_needs_attention
            state: "on"
          - condition: template
            value_template: >
              {{ now().timestamp() - (this.attributes.last_triggered | as_timestamp | int(0)) > 60 * 50 }}

action:
  - choose:
      - conditions: "{{ trigger.id == 'trigger_task_overdue' or trigger.id == 'trigger_send_notification' }}"
        sequence:
          - condition: template
            value_template: "{{ send_notification == True }}"
          - condition: time
            before: !input notification_max_time
          - condition: state
            entity_id: binary_sensor.notification_non_disturb
            state: "off"
          - condition: state
            entity_id: !input task_needs_attention
            state: "on"
          - condition: template
            value_template: >
              {{ now().timestamp() - (this.attributes.last_triggered | as_timestamp | int(0)) > 60 * 50 }}
          - repeat:
              for_each:
                - person: person.joao_carreira
                  device: notify.mobile_app_radium
                - person: person.bianca_pires
                  device: notify.mobile_app_calcium
              sequence:
                - if:
                    - "{{ is_state(repeat.item.person, 'home') }}"
                  then:
                    - service: "{{ repeat.item.device }}"
                      data:
                        title: Tarefa Doméstica
                        message: !input notification_message
                        data:
                          tag: !input android_task_id
                          priority: high
                          persistent: false
                          channel: Tasks
                          sticky: true
                          clickAction: "/lovelace/shores"
                          actions:
                            - action: !input notification_action_id
                              title: !input notification_action
    default:
      - service: notify.mobile_app_all
        data:
          message: clear_notification
          data:
            tag: !input android_task_id
            dismiss: true
      - service: persistent_notification.dismiss
        data:
          notification_id: !input notification_action_id

      - service: shell_command.external_my_sql_insert
        data:
          table: tasks
          value: >
            "{{ task_done_code_name }}"
          column: task_name
          date_stamp: >
            "{{ record_timestamp}}"
          save_string: "true"
          save_date_time: "true"

      - delay: 00:00:01

      - action: homeassistant.update_entity
        data:
          entity_id: !input task_sensor
