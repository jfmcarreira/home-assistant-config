<<: !include common.yml

esphome:
  name: ${devicename}
  platform: ESP8266
  board: nodemcu

api:
  services:
    - service: minimal_open_cover
      then:
        - cover.close: cover_1
        - wait_until:
            lambda: |-
              return id(cover_1).position == COVER_CLOSED;
        - delay: 1s
        - cover.control:
            id: cover_1
            position: ${SmallOpenPosition}


globals:
  - id: cover_action
    type: int
    restore_value: no
    initial_value: '0'


binary_sensor:
  - platform: gpio
    id: sw_open
    pin:
      number: ${Open}
      inverted: true
      mode:
        input: true
        pullup: true
    on_multi_click:
      - timing:
          - ON for at least 1s
        then:
          - logger.log: "Cover going to 50"
          - cover.control:
              id: cover_1
              position: 50%
      - timing:
          - ON for at most 1s
          - OFF for at least 100ms
        then:
          - globals.set:
              id: cover_action
              value: "1"
          - if:
              condition:
                or:
                  - binary_sensor.is_on: sw_extra_top
                  - binary_sensor.is_on: sw_extra_bottom
              then:
                - logger.log: "Special control"
                - script.execute: special_cover_controls
              else:
                - logger.log: "Cover Open"
                - lambda: |-
                    auto call = id(cover_1).make_call();
                    if(id(cover_1).current_operation == CoverOperation::COVER_OPERATION_OPENING){
                      call.set_command_stop();
                    } else {
                      call.set_command_open();
                    }
                    call.perform();

  - platform: gpio
    id: sw_close
    pin:
      number: ${Close}
      inverted: true
      mode:
        input: true
        pullup: true
    on_multi_click:
      - timing:
          - ON for at least 1s
        then:
          - logger.log: "Cover going to just open"
          - cover.close: cover_1
          - wait_until:
              lambda: |-
                return id(cover_1).position == COVER_CLOSED;
          - delay: 1s
          - cover.control:
              id: cover_1
              position: ${SmallOpenPosition}
      - timing:
          - ON for at most 1s
          - OFF for at least 100ms
        then:
          - globals.set:
              id: cover_action
              value: "-1"
          - if:
              condition:
                or:
                  - binary_sensor.is_on: sw_extra_top
                  - binary_sensor.is_on: sw_extra_bottom
              then:
                - logger.log: "Special control"
                - script.execute: special_cover_controls
              else:
                - logger.log: "Cover closing"
                - lambda: |-
                    auto call = id(cover_1).make_call();
                    if(id(cover_1).current_operation == CoverOperation::COVER_OPERATION_CLOSING){
                      call.set_command_stop();
                    } else {
                      call.set_command_close();
                    }
                    call.perform();


  - platform: gpio
    id: sw_extra_top
    pin:
      number: ${ExtraTop}
      inverted: true
      mode:
        input: true
        pullup: true
    on_press:
      then:
          - logger.log: "Extra Top"
          # - delay: 400ms
          # - switch.toggle: relay_direction

  - platform: gpio
    id: sw_extra_bottom
    pin:
      number: ${ExtraBottom}
      inverted: true
      mode:
        input: true
        pullup: true

    on_press:
      then:
        - logger.log: "Extra Bottom"

switch:
  - platform: gpio
    id: relay_power
    pin: ${RelayPower}
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: relay_direction
    pin:
      number: ${RelayDirection}
      inverted: ${InvertRelayDirection}
    restore_mode: ALWAYS_OFF


  - platform: template
    name: "cover_control_open_sunsire_${CoverName}"
    device_class: switch
    restore_state: yes
    lambda: |-
      return {};
    optimistic: yes

  - platform: template
    name: "cover_control_close_sunset_${CoverName}"
    device_class: switch
    restore_state: yes
    lambda: |-
      return {};
    optimistic: yes

script:
  - id: special_cover_controls
    then:
      - mqtt.publish_json:
          topic: esphome/cover/control_control
          payload: |-
            root["floor"] = -1;
            root["sun_orientation"] = -1;

            if (id(cover_action) == 1) {
                root["cover_action"] = "open";
            } else if (id(cover_action) == -1) {
                root["cover_action"] = "close";
            } else {
                root["cover_action"] = "stop";
            }

            if (id(sw_extra_top).state && id(sw_extra_bottom).state ) {
              return;
            }
            if (id(sw_extra_top).state) {
              root["floor"] = ${Floor};
              return;
            }
            if (id(sw_extra_bottom).state) {
              root["sun_orientation"] = ${SunOrientation};
              return;
            }
      - logger.log: "Special control finished"

mqtt:
  reboot_timeout: 0s
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: false
  discovery_retain: false
  on_json_message:
    topic: esphome/cover/control_control
    then:
      - lambda: |-
          if(x["floor"] != -1 && x["floor"] != ${Floor}) {
            return;
          }
          if(x["sun_orientation"] != -1 && x["sun_orientation"] != ${SunOrientation}) {
            return;
          }
          auto call = id(cover_1).make_call();
          if( x["cover_action"] == "open" && id(cover_1).current_operation != CoverOperation::COVER_OPERATION_OPENING ) {
            call.set_command_open();
          } else if( x["cover_action"] == "close" && id(cover_1).current_operation != CoverOperation::COVER_OPERATION_CLOSING ) {
            call.set_command_close();
          } else {
            call.set_command_stop();
          }
          call.perform();



  # on_message:
  #   - topic: esphome/cover/trigger/close_all
  #     qos: 0
  #     then:
  #       - cover.close: cover_1
  #   - topic: esphome/cover/trigger/open_all
  #     qos: 0
  #     then:
  #       - cover.open: cover_1
  #   - topic: esphome/cover/trigger/stop_all
  #     qos: 0
  #     then:
  #       - cover.stop: cover_1


cover:
  - platform: time_based
    id: cover_1
    name: "${CoverName}"
    device_class: shutter
    assumed_state: false
    open_action:
      - switch.turn_off: relay_power
      - delay: 500ms
      - switch.turn_on: relay_direction
      - delay: 500ms
      - switch.turn_on: relay_power
      - delay: 500ms
    close_action:
      - switch.turn_off: relay_power
      - delay: 500ms
      - switch.turn_off: relay_direction
      - delay: 500ms
      - switch.turn_on: relay_power
      - delay: 500ms
    stop_action:
      - switch.turn_off: relay_power
      - delay: 500ms
    close_duration: ${CoverTime}
    open_duration: ${CoverTime}