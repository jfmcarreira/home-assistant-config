substitutions:
  devicename: nodemcu_gate

esphome:
  name: ${devicename}
  friendly_name: NodeMCU do Port√£o

esp8266:
  board: nodemcuv2
  early_pin_init: false

packages:
  esphome_base: !include packages/common.yml
  esphome_web: !include packages/webserver.yml

external_components:
  - source:
      type: local
      path: components/
    components: [sc_cover]

output:
  - platform: gpio
    id: relay_1
    pin:
      number: D1

  - platform: gpio
    id: relay_2
    pin:
      number: D2

sensor:
  - platform: homeassistant
    id: main_power
    entity_id: sensor.device_power_gate

binary_sensor:
  - platform: gpio
    id: gate_close_sensor
    name: gate_close
    pin:
      inverted: true
      number: D5
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 250ms
    # on_press:
    #   then:
    #     - cover.template.publish:
    #         id: gate
    #         state: CLOSED

    # on_release:
    #   then:
    #     - cover.template.publish:
    #         id: gate
    #         current_operation: OPENING
  - platform: gpio
    id: gate_open_sensor
    name: gate_open
    pin:
      number: D6
      inverted: true
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 250ms
    # on_press:
    #   then:
    #     - cover.template.publish:
    #         id: gate
    #         state: OPEN
    # on_release:
    #   then:
    #     - cover.template.publish:
    #         id: gate
    #         current_operation: CLOSING

button:
  - platform: output
    id: gate_open_single
    name: gate_open_single
    output: relay_2
    duration: 750ms

  - platform: output
    id: gate_open
    name: gate_open
    output: relay_1
    duration: 750ms

cover:
  - platform: sc_cover
    name: "Gate"
    id: gate
    device_class: gate
    activation_button: gate_open
    switch_interval: 1500ms
    open_endstop: gate_open_sensor
    close_endstop: gate_close_sensor
    open_duration: 17s
    close_duration: 20s

  # - platform: template
  #   name: "Gate"
  #   id: gate
  #   device_class: gate
  #   lambda: |-
  #     if (id(gate_open)) {
  #       return COVER_OPEN;
  #     } else if (id(gate_close_sensor)) {
  #       return COVER_CLOSED;
  #     }
  #     return {};
  #   open_action:
  #     - if:
  #         condition:
  #           and:
  #             - binary_sensor.is_on: gate_close_sensor
  #         then:
  #           - button.press: gate_open
  #   close_action:
  #     - if:
  #         condition:
  #           and:
  #             - binary_sensor.is_on: gate_open_sensor
  #         then:
  #           - button.press: gate_open
  #   optimistic: false
  #   has_position: false

  # - platform: feedback
  #   name: "Gate"
  #   device_class: gate
  #   has_built_in_endstop: true
  #   assumed_state: false
  #   open_action:
  #     - if:
  #         condition:
  #           and:
  #             - binary_sensor.is_on: gate_close_sensor
  #         then:
  #           - button.press: gate_open
  #   close_action:
  #     - if:
  #         condition:
  #           and:
  #             - binary_sensor.is_on: gate_open_sensor
  #         then:
  #           - button.press: gate_open
  #   stop_action:
  #     - if:
  #         condition:
  #           and:
  #             - binary_sensor.is_off: gate_open_sensor
  #             - binary_sensor.is_off: gate_close_sensor
  #         then:
  #           - button.press: gate_open

  #   open_endstop: gate_open_sensor
  #   close_endstop: gate_close_sensor
  #   open_duration: 17s
  #   close_duration: 20s
  #   max_duration: 25s
  #   direction_change_wait_time: 5s
