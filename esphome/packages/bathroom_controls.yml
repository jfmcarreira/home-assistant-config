packages:
  motion_light: !include motion_light.yml

globals:
  - id: should_turn_off_both_lights
    type: bool
    restore_value: no
    initial_value: "false"

script:
  - id: bathroom_toggle_lights_countdown
    mode: restart
    then:
      - globals.set:
          id: should_turn_off_both_lights
          value: "false"
      - delay: 30s
      - globals.set:
          id: should_turn_off_both_lights
          value: "true"
      - logger.log: "Turning both lights off count finished"

light:
  - id: !extend light_1
    on_turn_off:
      - globals.set:
          id: should_turn_off_both_lights
          value: "false"
  - id: !extend light_2
    on_turn_off:
      - globals.set:
          id: should_turn_off_both_lights
          value: "false"

binary_sensor:
  - id: sw_1
    platform: gpio
    pin: GPIO13
    on_multi_click:
      - timing:
          - ON for at most 1000ms
          - OFF for at least 100ms
        invalid_cooldown: 100ms
        then:
          - if:
              condition:
                - script.is_running: light_turn_on_action
              then:
                - logger.log: "Skipping due to auto on"
                - script.stop: light_turn_on_action
              else:
                - if:
                    condition:
                      or:
                        - and:
                            - light.is_on: light_1
                            - light.is_on: light_2
                        - and:
                            - lambda: "return id(should_turn_off_both_lights);"
                            - or:
                                - light.is_on: light_1
                                - light.is_on: light_2
                    then:
                      - light.turn_off: light_1
                      - light.turn_off: light_2
                    else:
                      - if:
                          condition:
                            - light.is_on: ${input_a_light}
                          then:
                            - light.turn_off: ${input_a_light}
                          else:
                            - light.turn_on: ${input_a_light}
                            - script.execute: bathroom_toggle_lights_countdown

      - timing:
          - ON for at least 1000ms
        invalid_cooldown: 100ms
        then:
          - logger.log: "Long 1 Press"
          - homeassistant.service:
              service: homeassistant.toggle
              data:
                entity_id: ${fan}

  - id: sw_2
    platform: gpio
    pin: GPIO5
    on_multi_click:
      - timing:
          - ON for at most 1000ms
          - OFF for at least 100ms
        invalid_cooldown: 100ms
        then:
          - if:
              condition:
                - script.is_running: light_turn_on_action
              then:
                - logger.log: "Skipping due to auto on"
                - script.stop: light_turn_on_action
              else:
                - if:
                    condition:
                      or:
                        - and:
                            - light.is_on: light_1
                            - light.is_on: light_2
                        - and:
                            - lambda: "return id(should_turn_off_both_lights);"
                            - or:
                                - light.is_on: light_1
                                - light.is_on: light_2
                    then:
                      - light.turn_off: light_1
                      - light.turn_off: light_2
                    else:
                      - if:
                          condition:
                            - light.is_on: ${input_b_light}
                          then:
                            - light.turn_off: ${input_b_light}
                          else:
                            - light.turn_on: ${input_b_light}
                            - script.execute: bathroom_toggle_lights_countdown

      - timing:
          - ON for at least 1000ms
        invalid_cooldown: 100ms
        then:
          - logger.log: "Long 2 Press"
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                name: button_2
                type: long
                device: ${devicename}
