esphome:
  name: ${devicename}

esp8266:
  board: nodemcu
  restore_from_flash: true
  framework:
    version: recommended

api:
  services:
    - service: minimal_open_cover
      then:
        - script.execute: cover_small_open
    - service: middle_open_cover
      then:
        - script.execute: cover_middle_open_cover

globals:
  - id: cover_action
    type: int
    restore_value: no
    initial_value: "0"
  - id: covers_should_send_events
    type: bool
    restore_value: no
    initial_value: "true"

sensor:
  - platform: homeassistant
    id: cover_lower_position
    entity_id: input_number.cover_lower_position_${CoverName}
  - platform: homeassistant
    id: cover_higher_position
    entity_id: input_number.cover_higher_position_${CoverName}

event:
  - platform: template
    id: main_top_button_event
    name: Main Top Button
    icon: mdi:button-pointer
    device_class: button
    event_types:
      - double
      - triple
  - platform: template
    id: main_bottom_button_event
    name: Main Bottom Button
    icon: mdi:button-pointer
    device_class: button
    event_types:
      - double
      - triple
  - platform: template
    id: extra_top_button_event
    name: Extra Top Button
    icon: mdi:button-pointer
    device_class: button
    event_types:
      - single
      - long
      - double
      - triple
  - platform: template
    id: extra_bottom_button_event
    name: Extra Bottom Button
    icon: mdi:button-pointer
    device_class: button
    event_types:
      - single
      - long
      - double
      - triple

binary_sensor:
  - platform: homeassistant
    id: notify_home
    entity_id: binary_sensor.notify_home

  - platform: homeassistant
    id: cover_controls_enabled
    entity_id: binary_sensor.cover_controls_enabled

  - platform: gpio
    id: sw_open
    pin:
      number: ${Open}
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 20ms
      - delayed_off: 20ms
    on_multi_click:
      - timing:
          - ON for at least 1s
        invalid_cooldown: 100ms
        trigger_id: main_top_long
        then:
          - script.execute: cancel_extra_events
          - if:
              condition:
                or:
                  - not:
                      - api.connected:
                  - binary_sensor.is_on: cover_controls_enabled
              then:
                - logger.log: "Cover going to Middle"
                - cover.control:
                    id: cover_1
                    position: !lambda |-
                      return id(cover_higher_position).state / 100.0;
      - timing:
          - ON for at most 1s
          - OFF for at least 100ms
        invalid_cooldown: 100ms
        trigger_id: main_top_single
        then:
          - script.execute: cancel_extra_events
          - globals.set:
              id: cover_action
              value: !lambda |-
                return id(cover_1).current_operation == CoverOperation::COVER_OPERATION_OPENING ? 0 : 1;
          - if:
              condition:
                or:
                  - binary_sensor.is_on: sw_extra_top
                  - binary_sensor.is_on: sw_extra_bottom
              then:
                - logger.log: "Special control"
                - script.execute: special_cover_controls
              else:
                - if:
                    condition:
                      or:
                        - not:
                            - api.connected:
                        - binary_sensor.is_on: cover_controls_enabled
                    then:
                      - select.set_index:
                          id: last_action
                          index: 0
                      - lambda: |-
                          auto call = id(cover_1).make_call();
                          if(id(cover_1).current_operation == CoverOperation::COVER_OPERATION_OPENING){
                            call.set_command_stop();
                          } else {
                            call.set_command_open();
                          }
                          call.perform();
      - timing:
          - ON for at most 500ms
          - OFF for at most 500ms
          - ON for at most 500ms
          - OFF for at least 400ms
        trigger_id: main_top_double
        invalid_cooldown: 100ms
        then:
          - event.trigger:
              id: main_top_button_event
              event_type: double
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                name: main_top
                type: double
                device: ${devicename}
      - timing:
          - ON for at most 500ms
          - OFF for at most 500ms
          - ON for at most 500ms
          - OFF for at most 500ms
          - ON for at most 500ms
          - OFF for at least 300ms
        trigger_id: main_top_triple
        invalid_cooldown: 100ms
        then:
          - lambda: |-
              id(main_top_single).cancel();
          - event.trigger:
              id: main_top_button_event
              event_type: triple
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                name: main_top
                type: triple
                device: ${devicename}

  - platform: gpio
    id: sw_close
    pin:
      number: ${Close}
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 20ms
      - delayed_off: 20ms
    on_multi_click:
      - timing:
          - ON for at least 1s
        invalid_cooldown: 100ms
        trigger_id: main_bottom_long
        then:
          - if:
              condition:
                or:
                  - not:
                      - api.connected:
                  - binary_sensor.is_on: cover_controls_enabled
              then:
                - script.execute: cover_small_open
      - timing:
          - ON for at most 1s
          - OFF for at least 100ms
        invalid_cooldown: 100ms
        trigger_id: main_bottom_single
        then:
          - script.execute: cancel_extra_events
          - globals.set:
              id: cover_action
              value: !lambda |-
                return id(cover_1).current_operation == CoverOperation::COVER_OPERATION_CLOSING ? 0 : -1;
          - if:
              condition:
                or:
                  - binary_sensor.is_on: sw_extra_top
                  - binary_sensor.is_on: sw_extra_bottom
              then:
                - logger.log: "Special control"
                - script.execute: special_cover_controls
              else:
                - if:
                    condition:
                      or:
                        - not:
                            - api.connected:
                        - binary_sensor.is_on: cover_controls_enabled
                    then:
                      - select.set_index:
                          id: last_action
                          index: 0
                      - lambda: |-
                          auto call = id(cover_1).make_call();
                          if(id(cover_1).current_operation == CoverOperation::COVER_OPERATION_CLOSING){
                            call.set_command_stop();
                          } else {
                            call.set_command_close();
                          }
                          call.perform();
      - timing:
          - ON for at most 500ms
          - OFF for at most 500ms
          - ON for at most 500ms
          - OFF for at least 400ms
        trigger_id: main_bottom_double
        invalid_cooldown: 100ms
        then:
          - event.trigger:
              id: main_bottom_button_event
              event_type: double
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                name: main_bottom
                type: double
                device: ${devicename}
      - timing:
          - ON for at most 500ms
          - OFF for at most 500ms
          - ON for at most 500ms
          - OFF for at most 500ms
          - ON for at most 500ms
          - OFF for at least 300ms
        trigger_id: main_bottom_triple
        invalid_cooldown: 100ms
        then:
          - lambda: |-
              id(main_bottom_single).cancel();
          - event.trigger:
              id: main_bottom_button_event
              event_type: triple
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                name: main_bottom
                type: triple
                device: ${devicename}

  - platform: gpio
    id: sw_extra_top
    pin:
      number: ${ExtraTop}
      inverted: true
      mode:
        input: true
        pullup: true
    on_multi_click:
      - timing:
          - ON for at least 1s
        trigger_id: extra_top_long
        invalid_cooldown: 100ms
        then:
          - while:
              condition:
                binary_sensor.is_on: sw_extra_top
              then:
                - event.trigger:
                    id: extra_top_button_event
                    event_type: long
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      name: extra_top
                      type: long
                      device: ${devicename}
                - delay: 500ms
      - timing:
          - ON for at most 500ms
          - OFF for at least 500ms
        trigger_id: extra_top_single
        invalid_cooldown: 100ms
        then:
          - event.trigger:
              id: extra_top_button_event
              event_type: single
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                name: extra_top
                type: single
                device: ${devicename}
      - timing:
          - ON for at most 500ms
          - OFF for at most 500ms
          - ON for at most 500ms
          - OFF for at least 400ms
        trigger_id: extra_top_double
        invalid_cooldown: 100ms
        then:
          - event.trigger:
              id: extra_top_button_event
              event_type: double
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                name: extra_top
                type: double
                device: ${devicename}
      - timing:
          - ON for at most 500ms
          - OFF for at most 500ms
          - ON for at most 500ms
          - OFF for at most 500ms
          - ON for at most 500ms
          - OFF for at least 300ms
        trigger_id: extra_top_triple
        invalid_cooldown: 100ms
        then:
          - lambda: |-
              id(extra_top_single).cancel();
          - event.trigger:
              id: extra_top_button_event
              event_type: triple
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                name: extra_top
                type: triple
                device: ${devicename}

  - platform: gpio
    id: sw_extra_bottom
    pin:
      number: ${ExtraBottom}
      inverted: true
      mode:
        input: true
        pullup: true
    on_multi_click:
      - timing:
          - ON for at least 1s
        trigger_id: extra_bottom_long
        invalid_cooldown: 100ms
        then:
          - while:
              condition:
                binary_sensor.is_on: sw_extra_bottom
              then:
                - event.trigger:
                    id: extra_bottom_button_event
                    event_type: long
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      name: extra_bottom
                      type: long
                      device: ${devicename}
                - delay: 500ms
      - timing:
          - ON for at most 500ms
          - OFF for at least 500ms
        trigger_id: extra_bottom_single
        invalid_cooldown: 100ms
        then:
          - event.trigger:
              id: extra_bottom_button_event
              event_type: single
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                name: extra_bottom
                type: single
                device: ${devicename}
      - timing:
          - ON for at most 500ms
          - OFF for at most 500ms
          - ON for at most 500ms
          - OFF for at least 400ms
        trigger_id: extra_bottom_double
        invalid_cooldown: 100ms
        then:
          - event.trigger:
              id: extra_bottom_button_event
              event_type: double
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                name: extra_bottom
                type: double
                device: ${devicename}
      - timing:
          - ON for at most 500ms
          - OFF for at most 500ms
          - ON for at most 500ms
          - OFF for at most 500ms
          - ON for at most 500ms
          - OFF for at least 300ms
        trigger_id: extra_bottom_triple
        invalid_cooldown: 100ms
        then:
          - lambda: |-
              id(extra_bottom_single).cancel();
          - event.trigger:
              id: extra_bottom_button_event
              event_type: triple
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                name: extra_bottom
                type: triple
                device: ${devicename}

switch:
  - platform: gpio
    id: relay_power
    pin: ${RelayPower}
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: relay_direction
    pin:
      number: ${RelayDirection}
      inverted: ${InvertRelayDirection}
    restore_mode: ALWAYS_OFF

script:
  - id: cover_small_open
    mode: single
    then:
      - logger.log: "Cover going to just open"
      - cover.close: cover_1
      - wait_until:
          lambda: |-
            return id(cover_1).position == COVER_CLOSED;
      - delay: 1s
      - cover.control:
          id: cover_1
          position: !lambda |-
            return id(cover_lower_position).state / 100.0;
  - id: cover_middle_open_cover
    mode: single
    then:
      - logger.log: "Cover going to the middle"
      - cover.control:
          id: cover_1
          position: !lambda |-
            return id(cover_higher_position).state / 100.0;

  - id: cancel_extra_events
    mode: restart
    then:
      - lambda: |-
          id(extra_top_single).cancel();
      - lambda: |-
          id(extra_top_long).cancel();
      - lambda: |-
          id(extra_bottom_single).cancel();
      - lambda: |-
          id(extra_bottom_long).cancel();

  - id: covers_block_extra_buttons_event
    mode: restart
    then:
      - globals.set:
          id: covers_should_send_events
          value: "false"
      - delay: 30s
      - globals.set:
          id: covers_should_send_events
          value: "true"
      - logger.log: "Countdown finished"

  - id: special_cover_controls
    then:
      - logger.log:
          format: "Special cover control"
          level: INFO
      - if:
          condition:
            and:
              - binary_sensor.is_on: sw_extra_top
              - binary_sensor.is_on: sw_extra_bottom
          then:
            - logger.log: "Special control using HA to close control all"
            - homeassistant.service:
                service: script.cover_group_action_all
                data:
                  action_to_run: !lambda |-
                    if (id(cover_action) == 1) {
                      return "cover.open_cover";
                    } else if (id(cover_action) == -1) {
                        return "cover.close_cover";
                    } else {
                        return "cover.stop_cover";
                    }

          else:
            - select.set_index:
                id: last_action
                index: 2
            - mqtt.publish_json:
                topic: esphome/cover/control_control
                payload: |-
                  root["floor"] = -1;
                  root["sun_orientation"] = -1;

                  if (id(cover_action) == 1) {
                      root["cover_action"] = "open";
                  } else if (id(cover_action) == -1) {
                      root["cover_action"] = "close";
                  } else {
                      root["cover_action"] = "stop";
                  }

                  if (id(sw_extra_top).state && id(sw_extra_bottom).state ) {
                    return;
                  }
                  if (id(sw_extra_top).state) {
                    root["floor"] = ${Floor};
                    return;
                  }
                  if (id(sw_extra_bottom).state) {
                    root["sun_orientation"] = ${SunOrientation};
                    return;
                  }
            - logger.log: "Special control using MQTT finished"

mqtt:
  reboot_timeout: 0s
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: false
  discovery_retain: false
  on_json_message:
    topic: esphome/cover/control_control
    then:
      - lambda: |-
          if(x["floor"] != -1 && x["floor"] != ${Floor}) {
            return;
          }
          if(x["sun_orientation"] != -1 && x["sun_orientation"] != ${SunOrientation}) {
            return;
          }
          auto call = id(cover_1).make_call();
          if( x["cover_action"] == "open" && id(cover_1).current_operation != CoverOperation::COVER_OPERATION_OPENING ) {
            call.set_command_open();
          } else if( x["cover_action"] == "close" && id(cover_1).current_operation != CoverOperation::COVER_OPERATION_CLOSING ) {
            call.set_command_close();
          } else {
            call.set_command_stop();
          }
          call.perform();

select:
  - platform: template
    name: cover_${CoverName}_last_action
    id: last_action
    icon: mdi:gesture-double-tap
    options:
      - "Manualmente"
      - "Grupo"
      - "Fachada/Andar"
      - "Sunrise"
      - "Sunset"
      - "Sol"
      - "Chuva"
    initial_option: "Manualmente"
    optimistic: true
    set_action:
      - logger.log:
          format: "Last action set to: %s"
          args: ["x.c_str()"]

cover:
  - platform: time_based
    id: cover_1
    name: "${CoverName}"
    device_class: shutter
    assumed_state: false
    has_built_in_endstop: true
    open_action:
      - switch.turn_off: relay_power
      - delay: 500ms
      - switch.turn_on: relay_direction
      - delay: 500ms
      - switch.turn_on: relay_power
      - delay: 500ms
    close_action:
      - switch.turn_off: relay_power
      - delay: 500ms
      - switch.turn_off: relay_direction
      - delay: 500ms
      - switch.turn_on: relay_power
      - delay: 500ms
    stop_action:
      - switch.turn_off: relay_power
      - delay: 500ms
    close_duration: ${CoverTime}
    open_duration: ${CoverTime}
