substitutions:
  devicename: shelly25_lights_office
  InputPin: GPIO13

packages:
  esphome_base: !include packages/common.yml
  esphome_web: !include packages/webserver.yml
  home_state: !include packages/home_state.yml

  device_base: !include
    file: packages/shelly25.yml
    vars:
      name: Shelly25 Office

  lights_base: !include
    file: packages/shelly25_lights.yml
    vars:
      Light_1_Name: Office Main
      Light_2_Name: Office Extra

  room_controls: !include
    file: packages/room_lights.yml
    vars:
      light_state_count: 3

  motion_light: !include packages/motion_light.yml

script:
  - id: smart_light_state
    then:
      - if:
          condition:
            lambda: "return id(lights_state) == 0;"
          then:
            - light.turn_on: light_1
            - light.turn_on: light_2
      - if:
          condition:
            lambda: "return id(lights_state) == 1;"
          then:
            - light.turn_on: light_2
            - light.turn_off: light_1
      - if:
          condition:
            lambda: "return id(lights_state) == 2;"
          then:
            - light.turn_on: light_1
            - light.turn_off: light_2

binary_sensor:
  - id: !extend sw_1
    on_multi_click:
      - timing:
          - ON for at most 1000ms
          - OFF for at least 100ms
        invalid_cooldown: 100ms
        then:
          - if:
              condition:
                - script.is_running: light_turn_on_action
              then:
                - script.stop: light_turn_on_action
              else:
                - if:
                    condition:
                      or:
                        - light.is_on: light_1
                        - light.is_on: light_2
                    then:
                      - logger.log: "Turning lights OFF"
                      - light.turn_off: light_1
                      - light.turn_off: light_2
                      - globals.set:
                          id: lights_state
                          value: "-1"
                    else:
                      - if:
                          condition:
                            and:
                              - api.connected:
                              - binary_sensor.is_on: house_mode_night
                          then:
                            - logger.log: "Turning lights in Night mode"
                            - globals.set:
                                id: lights_state
                                value: "1"
                            - script.execute: smart_light_state
                          else:
                            - logger.log: "Turning both lights ON"
                            - globals.set:
                                id: lights_state
                                value: "0"
                            - script.execute: smart_light_state
# binary_sensor:
#   - id: sw_1
#     platform: gpio
#     pin: ${InputPin}
#     on_multi_click:
#       - timing:
#           - ON for at most 1000ms
#           - OFF for at least 100ms
#         invalid_cooldown: 100ms
#         then:
#           - if:
#               condition:
#                 - lambda: "return id(prevent_light_toggle) == true;"
#               then:
#                 - globals.set:
#                     id: prevent_light_toggle
#                     value: "false"
#               else:
#                 - if:
#                     condition:
#                       or:
#                         - light.is_on: light_1
#                         - light.is_on: light_2
#                     then:
#                       - light.turn_off: light_1
#                       - light.turn_off: light_2
#                       - globals.set:
#                           id: lights_state
#                           value: "1"
#                     else:
#                       - if:
#                           condition:
#                             and:
#                               - api.connected:
#                               - binary_sensor.is_on: house_mode_night
#                           then:
#                             - light.turn_on: light_2
#                             - globals.set:
#                                 id: lights_state
#                                 value: "1"
#                           else:
#                             - light.turn_on: light_1
#                             - light.turn_on: light_2
#                             - globals.set:
#                                 id: lights_state
#                                 value: "0"

#       - timing:
#           - ON for at least 1000ms
#         invalid_cooldown: 100ms
#         then:
#           - if:
#               condition:
#                 and:
#                   - api.connected:
#               then:
#                 - script.execute: smart_light_state
