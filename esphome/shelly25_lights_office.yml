substitutions:
  devicename: shelly25_lights_office
  FriendlyName: Shelly25 Office
  InputPin: GPIO13
  Light_1_Name: Office Main
  Light_2_Name: Office Extra

packages:
  esphome_base: !include packages/common.yml
  home_state: !include packages/home_state.yml
  base: !include packages/shelly25_two_lights_one_switch.yml
  motion_light: !include packages/motion_light.yml

script:
  - id: smart_light_state
    then:
      - globals.set:
          id: lights_state
          value: !lambda "return id(lights_state)+=1;"
      - if:
          condition:
            lambda: "return id(lights_state) > 2;"
          then:
            - globals.set:
                id: lights_state
                value: "0"

      - if:
          condition:
            lambda: "return id(lights_state) == 0;"
          then:
            - light.turn_on: light_1
            - light.turn_on: light_2
            - homeassistant.service:
                service: light.turn_off
                data:
                  entity_id: light.office_lamp
      - if:
          condition:
            lambda: "return id(lights_state) == 1;"
          then:
            - light.turn_on: light_2
            - light.turn_off: light_1
            - homeassistant.service:
                service: light.turn_off
                data:
                  entity_id: light.office_lamp

      - if:
          condition:
            lambda: "return id(lights_state) == 2;"
          then:
            - light.turn_on: light_1
            - light.turn_off: light_2
            - homeassistant.service:
                service: light.turn_off
                data:
                  entity_id: light.office_lamp

binary_sensor:
  - platform: homeassistant
    id: office_lamp_state
    entity_id: light.office_lamp

  - id: sw_1
    platform: gpio
    pin: ${InputPin}
    on_multi_click:
      - timing:
          - ON for at most 1000ms
          - OFF for at least 100ms
        invalid_cooldown: 100ms
        then:
          - if:
              condition:
                - lambda: "return id(prevent_light_toggle) == true;"
              then:
                - globals.set:
                    id: prevent_light_toggle
                    value: "false"
              else:
                - if:
                    condition:
                      or:
                        - light.is_on: light_1
                        - light.is_on: light_2
                        - binary_sensor.is_on: office_lamp_state
                    then:
                      - light.turn_off: light_1
                      - light.turn_off: light_2
                      - homeassistant.service:
                          service: light.turn_off
                          data:
                            entity_id: light.office_lamp
                      - globals.set:
                          id: lights_state
                          value: "1"
                    else:
                      - if:
                          condition:
                            and:
                              - api.connected:
                              - binary_sensor.is_on: house_mode_night
                          then:
                            - light.turn_on: light_2
                            - globals.set:
                                id: lights_state
                                value: "1"
                          else:
                            - light.turn_on: light_1
                            - light.turn_on: light_2
                            - globals.set:
                                id: lights_state
                                value: "0"

      - timing:
          - ON for at least 1000ms
        invalid_cooldown: 100ms
        then:
          - if:
              condition:
                and:
                  - api.connected:
              then:
                - script.execute: smart_light_state
          # - if:
          #     condition:
          #       and:
          #         - light.is_on: light_1
          #         - light.is_on: light_2
          #     then:
          #       - light.turn_off: light_1
          #     else:
          #       - if:
          #           condition:
          #             and:
          #               - light.is_off: light_1
          #               - light.is_off: light_2
          #           then:
          #             - light.turn_on: light_2
          #           else:
          #             - light.toggle: light_1
          #             - light.toggle: light_2
