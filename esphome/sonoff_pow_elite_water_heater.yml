# Basic Config
substitutions:
  friendly_name: Sonoff Water Heater
  device_name: sonoff_pow_elite_water_heater

esphome:
  name: $device_name

esp32:
  board: nodemcu-32s

packages:
  esphome_base: !include packages/common.yml

esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true

bluetooth_proxy:
  active: true

uart:
  rx_pin: GPIO16
  baud_rate: 4800

sensor:
  - platform: cse7766
    update_interval: 2s
    current:
      id: current_sensor
    voltage:
      id: voltage_sensor
    power:
      name: $friendly_name Power
      id: w_sensor
    energy:
      name: $friendly_name Energy
      id: wh_sensor
      filters:
        - multiply: 0.001

  - platform: total_daily_energy
    name: $friendly_name Total Daily Energy
    power_id: w_sensor
    filters:
      - multiply: 0.001

  - platform: wifi_signal
    name: $friendly_name Wifi RSSI
    update_interval: 60s

  - platform: template
    name: $friendly_name Temperature
    device_class: temperature
    unit_of_measurement: Â°C
    id: esp32_temp
    lambda: return temperatureRead();

  - platform: template
    device_class: power_factor
    id: power_factor
    lambda: return id(w_sensor).state / id(voltage_sensor).state / id(current_sensor).state;

  - platform: esp32_hall
    name: $friendly_name ESP32 Hall Sensor
    update_interval: 60s

binary_sensor:
  - platform: gpio
    pin: GPIO00
    id: reset
    internal: true
    filters:
      - invert:
      - delayed_off: 10ms
    on_click:
      - max_length: 350ms # short press to toggle the relay
        then:
          switch.toggle: relay_1
      - min_length: 360ms # long press to cycle display info
        max_length: 3s
        then:
          - if:
              condition:
                binary_sensor.is_on: page
              then:
                binary_sensor.template.publish:
                  id: page
                  state: OFF
              else:
                binary_sensor.template.publish:
                  id: page
                  state: ON

  - platform: template # this is a fake sensor to tell the screen which info to show on display
    id: page
    publish_initial_state: true
    internal: true

display:
  platform: tm1621
  id: tm1621_display
  cs_pin: GPIO25
  data_pin: GPIO14
  read_pin: GPIO26
  write_pin: GPIO27
  lambda: |-
    if (id(page).state) {
      it.display_voltage(true);
      it.display_kwh(false);
      it.printf(0, "%.1f", id(voltage_sensor).state);
      it.printf(1, "%.1f", id(current_sensor).state);
    } else {
      it.display_voltage(false);
      it.display_kwh(true);
      it.printf(0, "%.1f", id(wh_sensor).state);
      it.printf(1, "%.1f", id(w_sensor).state);
    }

output:
  - platform: ledc
    id: led
    pin:
      number: GPIO18
      inverted: True

switch:
  - platform: template
    name: $friendly_name
    optimistic: true
    id: relay_1
    turn_off_action:
      - switch.turn_on: relay_off
    turn_on_action:
      - switch.turn_on: relay_on
  - platform: gpio
    restore_mode: ALWAYS_OFF
    internal: true
    id: relay_off
    pin: GPIO04
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: relay_off # bi-stable relay so no need to keep on
      - light.turn_off: switch_led
    interlock: [relay_on]
  - platform: gpio
    restore_mode: ALWAYS_OFF
    internal: true
    id: relay_on
    pin: GPIO02
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: relay_on # bi-stable relay so no need to keep on
      - light.turn_on: switch_led
    interlock: [relay_off]

light:
  - platform: monochromatic
    id: switch_led
    output: led
    internal: True
  - platform: status_led
    id: wifi_status_led
    internal: True
    pin:
      number: GPIO05
      inverted: True

interval:
  - interval: 30s
    then:
      if:
        condition:
          wifi.connected:
        then:
          - light.turn_on: wifi_status_led
        else:
          - light.turn_off: wifi_status_led
